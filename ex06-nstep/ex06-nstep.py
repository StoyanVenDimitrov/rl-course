import gym
import numpy as np
import matplotlib.pyplot as plt
import random
from scipy.interpolate import interp1d


true_q = np.array([[2.38793603e-03, 2.64388602e-03, 2.54971209e-03, 2.69002414e-03],
 [2.99099505e-03, 3.26790383e-03, 3.88274209e-03, 3.42983552e-03],
 [4.33981590e-03, 4.92811352e-03, 6.01892691e-03, 5.01038706e-03],
 [6.83480020e-03, 7.66418743e-03, 9.09702643e-03, 7.58960910e-03],
 [1.05240295e-02, 1.13265750e-02, 1.36536377e-02, 1.12980239e-02],
 [1.50627492e-02, 1.58558775e-02, 1.84551512e-02, 1.56548961e-02],
 [2.01936751e-02, 2.04201451e-02, 2.30404236e-02, 1.93329865e-02],
 [2.29297575e-02, 2.31087777e-02, 2.33679911e-02, 2.09460698e-02],
 [2.16635751e-03, 2.30544552e-03, 2.30926037e-03, 2.55791934e-03],
 [2.60540474e-03, 2.75290702e-03, 3.09380923e-03, 3.27437914e-03],
 [3.51506514e-03, 3.91955955e-03, 4.54050906e-03, 4.90958658e-03],
 [4.05431408e-03, 5.14071620e-03, 6.02565780e-03, 8.41396259e-03],
 [9.99681778e-03, 1.13547694e-02, 1.40727727e-02, 1.12042502e-02],
 [1.55376517e-02, 1.71935222e-02, 2.08711601e-02, 1.68748152e-02],
 [2.37715660e-02, 2.69557947e-02, 2.86684317e-02, 2.30353692e-02],
 [2.96582787e-02, 3.53620231e-02, 3.01204217e-02, 2.67708141e-02],
 [1.71206467e-03, 1.67373582e-03, 1.72068111e-03, 2.06337045e-03],
 [1.99513858e-03, 1.84017819e-03, 2.01320300e-03, 2.33324391e-03],
 [2.81826119e-03, 1.35830645e-03, 1.78027544e-03, 1.96044407e-03],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [6.99889820e-03, 8.60312464e-03, 1.31512825e-02, 9.04527712e-03],
 [9.86928452e-03, 1.39864592e-02, 1.49227908e-02, 2.26704122e-02],
 [3.11340571e-02, 3.54742729e-02, 4.27891068e-02, 3.08677528e-02],
 [4.40755964e-02, 5.40053033e-02, 4.75899916e-02, 3.87190543e-02],
 [7.82499114e-04, 7.07804585e-04, 1.06890647e-03, 1.22273785e-03],
 [1.12810434e-03, 1.04525206e-03, 1.31664503e-03, 1.71036591e-03],
 [1.43794109e-03, 1.49715717e-03, 1.70603427e-03, 2.23414295e-03],
 [5.19761311e-04, 2.65355073e-03, 1.69783151e-03, 2.40412658e-03],
 [8.92825010e-03, 4.48775575e-03, 6.48723930e-03, 3.98303570e-03],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [3.51154273e-02, 4.14840998e-02, 5.93921428e-02, 3.79365566e-02],
 [7.00157430e-02, 8.58498124e-02, 7.65475073e-02, 6.13001460e-02],
 [2.98550115e-04, 1.22141291e-04, 3.94967023e-04, 3.93696209e-04],
 [2.88084283e-04, 1.37865226e-04, 3.69743339e-04, 6.06626528e-04],
 [5.34029395e-04, 6.97497624e-05, 2.48558944e-04, 4.59315763e-04],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [5.96052814e-03, 1.03158263e-02, 1.66249613e-02, 9.95321269e-03],
 [1.17056565e-02, 3.30154948e-02, 2.23386259e-02, 1.82333506e-02],
 [2.71540291e-02, 4.35139309e-02, 4.94644156e-02, 7.24473322e-02],
 [1.15820215e-01, 1.33093604e-01, 1.45844506e-01, 9.69225656e-02],
 [7.06505033e-05, 8.39211916e-06, 5.65383222e-05, 6.53227761e-05],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [7.62733989e-05, 2.33823937e-03, 2.19534887e-03, 1.71749863e-03],
 [4.88547415e-03, 6.99364741e-03, 8.87841428e-03, 1.21248486e-02],
 [2.67148439e-02, 1.48563765e-02, 1.81298726e-02, 1.10607711e-02],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [1.96668618e-01, 2.21555968e-01, 2.97273821e-01, 1.43949140e-01],
 [1.16210970e-05, 1.14366204e-06, 1.43416408e-05, 1.13325849e-05],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [9.22182351e-09, 4.49814485e-05, 4.66155638e-05, 6.95919860e-05],
 [4.46345864e-04, 5.99841404e-06, 3.12474653e-04, 3.42666809e-04],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [4.38110391e-02, 2.34764720e-02, 3.70302055e-02, 5.43860240e-03],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [3.55534658e-01, 4.06146805e-01, 6.02402344e-01, 2.80869699e-01],
 [3.98347931e-06, 7.53475864e-08, 1.52964394e-06, 1.76326780e-06],
 [3.44542994e-07, 9.96796217e-07, 2.70974076e-07, 9.85439070e-08],
 [3.30655536e-06, 2.50892574e-07, 4.45129281e-07, 3.59614233e-06],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
 [1.33245098e-03, 1.86392272e-02, 2.46085467e-02, 8.42722044e-03],
 [3.21761301e-02, 1.11952026e-01, 1.10070248e-01, 8.96634021e-02],
 [2.75596344e-02, 2.63187570e-01, 1.78983902e-01, 1.61211368e-01],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00]])

def nstep_sarsa(env, n=3, alpha=0.1, gamma=0.9, epsilon=0.1, num_ep=int(1e4)):
    Q = np.zeros((env.observation_space.n,  env.action_space.n))

    def choose_a(Q, s):
        if random.random() > epsilon:
            # breaking the ties at random!
            a = np.random.choice(np.where(Q[s] == Q[s].max())[0])
        else:
            a = random.randrange(len(Q[s]))
        return a

    for i in range(num_ep):
        s = env.reset()
        a = choose_a(Q, s)
        t = 0
        T = 100000
        R = []
        S = [s]
        A = [a]

        while True:
            if t < T:
                s_, r, done, _ = env.step(a)
                S.append(s_)
                R.append(r)
                if not done:
                    a_ = choose_a(Q, s_)
                    a = a_
                    A.append(a_)
                else:
                    T = t +1
            tau = t - n + 1
            if tau >= 0:
                sum_up_to = min((tau + n), T)
                G = 0
                for i in range(sum_up_to):
                    G = G + (gamma**i)*R[i]
                if (tau + n) < T:
                    G = G + (gamma**n)*Q[S[tau + n]][A[tau + n]]
                Q[S[tau]][A[tau]] = Q[S[tau]][A[tau]] + alpha*(G-Q[S[tau]][A[tau]])
            if t==T-1:
                break
            t = t + 1
    error = np.sqrt(np.mean(np.square(Q - true_q)))
    return Q, error



env = gym.make('FrozenLake-v0', map_name="8x8")
Q_n = []
alpha_step = 50
for n in np.power(2, range(10)):
    TD_alpha = []
    Q_alpha = []
    for alpha in np.linspace(0, 1, alpha_step):  # 11
        Q_value, error = nstep_sarsa(env, n=n, alpha=alpha, num_ep=int(1e3))
        Q_alpha.append(error)
    Q_n.append(Q_alpha)

x = np.linspace(0, 1, alpha_step)
y = Q_n
colors = ['#332288', '#88CCEE', '#44AA99', '#117733', '#999933',
          '#DDCC77', '#CC6677', '#882255', '#AA4499', '#B2182B']
for i, n in enumerate(np.power(2, range(10))):
    f2 = interp1d(x, y[i], kind='cubic')
    plt.title("Performance")
    plt.plot(x, y[i], 'o', color=colors[i], label=n)
    plt.plot(x, f2(x), '-', color=colors[i])
plt.legend(title='n')

plt.show()

